
-- making a table for the duplicates
CREATE TABLE `cyclistic2-444011.Cyclistic.Duplicates` AS
SELECT
  ride_id,
  COUNT(ride_id) as counted
FROM
  `cyclistic2-444011.Cyclistic.Merge`
GROUP BY
  ride_id
HAVING
  counted > 1


-- Checking details of duplicates
SELECT
  *
FROM
  `cyclistic2-444011.Cyclistic.Duplicates` AS Duplicates
LEFT JOIN
  `cyclistic2-444011.Cyclistic.Merge` AS `Merge`
ON
  `Merge`.ride_id = Duplicates.ride_id
-- They all come from different time notations:
--2024-05-31 23:56:47 UTC vs 2024-05-31 23:56:47.556000 UTC

-- Creating table without duplicates
WITH deduplicated AS (
  SELECT
    *,
    ROW_NUMBER() OVER (PARTITION BY ride_id) AS row_num
  FROM
    `cyclistic2-444011.Cyclistic.Merge`
)
SELECT *
FROM deduplicated
WHERE row_num = 1;


-- making a table without missing stations
CREATE TABLE `cyclistic2-444011.Cyclistic.NoMissingStations` AS
SELECT
  *
FROM
  `cyclistic2-444011.Cyclistic.No_Duplicates`
WHERE
  start_station_name IS NOT NULL AND start_station_name != ''
  AND
  end_station_name IS NOT NULL AND end_station_name != ''


-- New table with Travel_time values
CREATE TABLE `cyclistic2-444011.Cyclistic.Cleaned_Travel_Time` AS
SELECT
  ride_id,
    rideable_type,
    started_at,
    ended_at,
    start_station_name,
    start_station_id,
    end_station_name,
    end_station_id,
    start_lat,
    start_lng,
    member_casual,
    SAFE_CAST(end_lat AS FLOAT64) AS end_lat,
    SAFE_CAST(end_lng AS FLOAT64) AS end_lng,
  ROUND(TIMESTAMP_DIFF(ended_at, started_at, SECOND)/60,2) as Travel_time_in_Min
FROM
  `cyclistic2-444011.Cyclistic.Cleaned`


-- checking Travel_time values
SELECT
  ride_id,
 ROUND(TIMESTAMP_DIFF(ended_at, started_at, SECOND)/60,2) as Travel_time
FROM
  cyclistic2-444011.Cyclistic.NoMissingStations
GROUP BY
  Travel_time, ride_id
ORDER BY
  Travel_time
--44 turn out to be negative. The arrival time is earlier than the departure time. I am not sure what this means, they could be switched. To be sure I will remove these. 
















-- New table with Travel_time values
CREATE TABLE   `cyclistic2-444011.Cyclistic.Cleaned_No_Wrong_Rents_No_Minus` AS
SELECT
 *
FROM
  `cyclistic2-444011.Cyclistic.Cleaned_No_Wrong_Rents`
WHERE
  Travel_time_in_Min > 0
ORDER BY
  Travel_time_in_Min


-- Removing wrongly rented bikes below 2 min travel time and to the same station. 
CREATE TABLE `cyclistic2-444011.Cyclistic.Cleaned_Wrong_Rents` AS
SELECT
  ride_id,
  start_station_name,
  end_station_name,
  ROUND(TIMESTAMP_DIFF(ended_at, started_at, SECOND)/60,2) as Travel_time
FROM
  cyclistic2-444011.Cyclistic.NoMissingStations
WHERE
  start_station_name = end_station_name
GROUP BY
  Travel_time, ride_id, start_station_name, end_station_name
HAVING
  Travel_time <2
ORDER BY
  Travel_time



CREATE TABLE   `cyclistic2-444011.Cyclistic.Cleaned_No_Wrong_Rents_No_Minus` AS
SELECT
 *
FROM
  `cyclistic2-444011.Cyclistic.Cleaned_No_Wrong_Rents`
WHERE
  Travel_time_in_Min > 0
ORDER BY
  Travel_time_in_Min


CREATE TABLE `cyclistic2-444011.Cyclistic.Calculations_Travel_Time` AS
SELECT
member_casual AS member_casual,
 MAX(Travel_time_in_Min) AS max_travel_in_min,
 MIN(Travel_time_in_Min) AS min_travel_in_min,
 ROUND(AVG(Travel_time_in_Min),2) AS avg_travel_in_min
 --PERCENTILE_CONT(Travel_time_in_Min, 0.5) OVER() AS median


FROM
  `cyclistic2-444011.Cyclistic.Cleaner`


GROUP BY
  member_casual


--creating a table displaying the usage per member type per month
CREATE TABLE `cyclistic2-444011.Cyclistic.Calculations_Usage_Per_Month_Per_Membership_Type` AS
SELECT
  member_casual,
  EXTRACT(YEAR FROM TIMESTAMP(started_at)) AS year,
  EXTRACT(MONTH FROM TIMESTAMP(started_at)) AS month,
  COUNT(*) AS count_of_rides
FROM
  `cyclistic2-444011.Cyclistic.Cleaner`
GROUP BY
  year, month, member_casual
ORDER BY
  member_casual, year ASC, month ASC;

--creating a table displaying the most used beginning stations per membership_type
--CREATE TABLE `cyclistic2-444011.Cyclistic.Calculations_Most_Used_Stations_Per_Membership_Type` AS
WITH combined_usage AS (
  SELECT
    member_casual,
    start_station_name,
    COUNT(started_at) AS rides_per_station
  FROM
    `cyclistic2-444011.Cyclistic.Cleaner`
  WHERE
    member_casual IN ('member', 'casual')  -- Consider both 'member' and 'casual' types
  GROUP BY
    member_casual,
    start_station_name
)
SELECT
  member_casual,
  start_station_name,
  rides_per_station
FROM
  combined_usage
ORDER BY
  rides_per_station DESC  -- Sort to get the most used stations
LIMIT 10;  -- Limit to top 10 results (optional, based on how many results you want)




Niet de bovenstaande, maar ik denk deze:
WITH member_usage AS (
  SELECT
    member_casual,
    start_station_name,
    COUNT(started_at) AS rides_per_station
  FROM 
    `cyclistic2-444011.Cyclistic.Cleaner`
  WHERE
    member_casual = 'member'
  GROUP BY
    member_casual,
    start_station_name
),
casual_usage AS (
  SELECT
    member_casual,
    start_station_name,
    COUNT(started_at) AS rides_per_station
  FROM 
    `cyclistic2-444011.Cyclistic.Cleaner`
  WHERE
    member_casual = 'casual'
  GROUP BY
    member_casual,
    start_station_name
)


SELECT
  member_usage.start_station_name,
  member_usage.rides_per_station AS member_rides,
  casual_usage.rides_per_station AS casual_rides
FROM
  member_usage
JOIN
  casual_usage
ON
  member_usage.start_station_name = casual_usage.start_station_name
ORDER BY
  member_rides DESC, casual_rides DESC;








--CREATE TABLE `cyclistic2-444011.Cyclistic.Calculations_casual_rides_per_station` AS
WITH casual_usage AS (
  SELECT
    member_casual,
    start_station_name,
    COUNT(started_at) AS rides_per_station
  FROM
    `cyclistic2-444011.Cyclistic.Cleaner`
  WHERE
    member_casual = 'casual'
  GROUP BY
    member_casual,
    start_station_name
)


SELECT
  casual_usage.start_station_name,
  casual_usage.rides_per_station AS casual_rides,
FROM
  casual_usage


ORDER BY
  casual_rides DESC


-- amount of casual at top 10 most popular annual users. 
SELECT
  *
FROM
  `cyclistic2-444011.Cyclistic.Calculations_casual_rides_per_station`


WHERE
start_station_name =  'Kingsbury St & Kinzie St' OR
start_station_name =  'Clinton St & Washington Blvd' OR
start_station_name =  'Clinton St & Madison St' OR
start_station_name =  'Clark St & Elm St' OR
start_station_name =  'Clinton St & Jackson Blvd' OR
start_station_name =  'Wells St & Concord Ln' OR
start_station_name =  'Wells St & Elm St' OR
start_station_name =  'Dearborn St & Erie St' OR
start_station_name =  'University Ave & 57th St' OR
start_station_name =  'State St & Chicago Ave'


